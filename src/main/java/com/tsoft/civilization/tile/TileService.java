package com.tsoft.civilization.tile;

import com.tsoft.civilization.civilization.Civilization;
import com.tsoft.civilization.combat.HasCombatStrength;
import com.tsoft.civilization.tile.base.AbstractTile;
import com.tsoft.civilization.tile.base.MissileTilePastCostTable;
import com.tsoft.civilization.tile.base.TilePassCostTable;
import com.tsoft.civilization.tile.feature.TerrainFeature;
import com.tsoft.civilization.tile.feature.TerrainFeatureList;
import com.tsoft.civilization.unit.AbstractUnit;
import com.tsoft.civilization.economic.Supply;

public class TileService {

    // Don't generate events for civilization
    // They must be generated by caller
    public Supply calcSupply(AbstractTile tile) {
        Supply supply = tile.getBaseSupply();

        // add feature's supply
        TerrainFeatureList features = tile.getTerrainFeatures();
        if (!features.isEmpty()) {
            // start from last (i.e. on top) feature
            for (int i = features.size() - 1; i >= 0; i --) {
                TerrainFeature feature = features.get(i);

                // look for a blocking feature
                if (feature.isBlockingTileSupply()) {
                    return feature.getSupply();
                }

                supply = supply.add(feature.getSupply());
            }
        }
        return supply;
    }

    public int getPassCost(Civilization civilization, AbstractUnit unit, AbstractTile tile) {
        int passCost = TilePassCostTable.get(civilization, unit, tile);

        TerrainFeatureList features = tile.getTerrainFeatures();
        if (features.isEmpty()) {
            return passCost;
        }

        // add features starting from the uppermost
        for (int i = features.size() - 1; i >= 0; i --) {
            TerrainFeature feature = features.get(i);

            int featurePassCost = feature.getPassCost(unit);
            if (featurePassCost == TilePassCostTable.UNPASSABLE) {
                return TilePassCostTable.UNPASSABLE;
            }

            passCost += featurePassCost;
        }

        return passCost;
    }

    // Returns passing (or flying) cost for attacker's missile
    public int getMissilePastCost(HasCombatStrength attacker, AbstractTile tile) {
        int passCost = MissileTilePastCostTable.get(attacker, tile);

        TerrainFeatureList features = tile.getTerrainFeatures();
        if (features.isEmpty()) {
            return passCost;
        }

        // start from last (i.e. on top) feature
        for (int i = features.size() - 1; i >= 0; i --) {
            TerrainFeature feature = features.get(i);

            int featurePassCost = feature.getMissilePassCost(attacker);
            if (featurePassCost == TilePassCostTable.UNPASSABLE) {
                return TilePassCostTable.UNPASSABLE;
            }

            passCost += featurePassCost;
        }

        return passCost;
    }
}
